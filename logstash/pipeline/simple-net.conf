input {
  tcp {
      port =>  6000
      type => "local"
       }
       tcp {
       port => 6001
       type => "retrans"
       }
       
      }


filter {

    if [type] == "local" {
  grok {
match => { "message" => "%{NUMBER:file_size} %{DATE_EU:date} %{TIME:date2} \[%{NUMBER:n}\] %{WORD:d}>  %{WORD:d} %{UNIXPATH:path} -%{WORD:P} %{NUMBER:port} %{WORD:user}@%{WORD:host}:%{UNIXPATH:path2} %{UNIXPATH:pathnew}" }
       }
       
       csv {
              source => ["path2"]                                                   
                            separator => "/"                                               
                                                }
       
       
                   
       
       mutate {
         convert => [ "file_size", "integer"]
         remove_field => [ "message", "n", "d", "P", "port", "user", "host", "date", "date2", "column1", "column2", "column3", "column4", "column5" ]
         }
         
         
         
                                                   }
         
         
    if [type] == "retrans" {
    grok {
    match => {"message" => "%{NUMBER:file_size2} %{DATE_EU:date2} %{TIME:time2} \[%{NUMBER:n}\] %{WORD:cmd}>  %{WORD:cp} %{UNIXPATH:path3} %{UNIXPATH:path4}"}
    }
    mutate {
    convert => [ "file_size2", "integer"]
    remove_field => [ "message", "n", "cp", "port", "path3", "cmd", "date2", "path4", "time2", "host" ]
    }
    }
    
    
    }
    




output {

if [type] == "local" {
elasticsearch { hosts => ["elastic:9200"]
index => "local-%{+YYYY.MM.dd}" }
#stdout { codec => rubydebug }
}



if [type] == "retrans" {
elasticsearch { hosts => ["elastic:9200"] 
index => "retrans-%{+YYYY.MM.dd}" }
#stdout { codec => rubydebug }
}

if "_grokparsefailure" in [tags] {
    # write events that didn't match to a file
        file { "path" => "/tmp/grok_failures.txt" }
          } 
    }



